# Generated by Django 5.0.8 on 2024-09-24 11:07

import django.db.models.deletion
import etna.analytics.mixins
import etna.people.models
import uuid
import wagtail.fields
import wagtail_headless_preview.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("alerts", "0003_alert_name_alter_alert_title"),
        ("images", "0009_alter_customimage_custom_sensitive_image_warning"),
        ("wagtailcore", "0094_alter_page_locale"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_image_caption",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="An optional caption for hero images. This could be used for image sources or for other useful metadata.",
                        verbose_name="hero image caption (optional)",
                    ),
                ),
                (
                    "twitter_og_title",
                    models.CharField(
                        blank=True,
                        help_text="If left blank, the OpenGraph title will be used.",
                        max_length=255,
                        null=True,
                        verbose_name="Twitter OpenGraph title",
                    ),
                ),
                (
                    "twitter_og_description",
                    models.TextField(
                        blank=True,
                        help_text="If left blank, the OpenGraph description will be used.",
                        null=True,
                        verbose_name="Twitter OpenGraph description",
                    ),
                ),
                (
                    "teaser_text",
                    models.TextField(
                        help_text="A short, enticing description of this page. This will appear in promos and under thumbnails around the site.",
                        max_length=160,
                        verbose_name="teaser text",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        help_text="1-2 sentences introducing the subject of the page, and explaining why a user should read on.",
                        max_length=300,
                        verbose_name="introductory text",
                    ),
                ),
                (
                    "alert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="alerts.alert",
                    ),
                ),
                (
                    "hero_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="OpenGraph image",
                    ),
                ),
                (
                    "teaser_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear on thumbnails and promos around the site.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "twitter_og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="If left blank, the OpenGraph image will be used.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="Twitter OpenGraph image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                etna.analytics.mixins.DataLayerMixin,
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="BlogPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_image_caption",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="An optional caption for hero images. This could be used for image sources or for other useful metadata.",
                        verbose_name="hero image caption (optional)",
                    ),
                ),
                (
                    "twitter_og_title",
                    models.CharField(
                        blank=True,
                        help_text="If left blank, the OpenGraph title will be used.",
                        max_length=255,
                        null=True,
                        verbose_name="Twitter OpenGraph title",
                    ),
                ),
                (
                    "twitter_og_description",
                    models.TextField(
                        blank=True,
                        help_text="If left blank, the OpenGraph description will be used.",
                        null=True,
                        verbose_name="Twitter OpenGraph description",
                    ),
                ),
                (
                    "teaser_text",
                    models.TextField(
                        help_text="A short, enticing description of this page. This will appear in promos and under thumbnails around the site.",
                        max_length=160,
                        verbose_name="teaser text",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        help_text="1-2 sentences introducing the subject of the page, and explaining why a user should read on.",
                        max_length=300,
                        verbose_name="introductory text",
                    ),
                ),
                (
                    "alert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="alerts.alert",
                    ),
                ),
                (
                    "hero_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="OpenGraph image",
                    ),
                ),
                (
                    "teaser_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear on thumbnails and promos around the site.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "twitter_og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="If left blank, the OpenGraph image will be used.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="Twitter OpenGraph image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                etna.analytics.mixins.DataLayerMixin,
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="BlogPostPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "display_content_warning",
                    models.BooleanField(
                        default=False,
                        verbose_name="display a content warning on this page",
                    ),
                ),
                (
                    "custom_warning_text",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="If specified, will be used for the content warning. Otherwise the default text will be used.",
                        verbose_name="custom content warning text (optional)",
                    ),
                ),
                (
                    "twitter_og_title",
                    models.CharField(
                        blank=True,
                        help_text="If left blank, the OpenGraph title will be used.",
                        max_length=255,
                        null=True,
                        verbose_name="Twitter OpenGraph title",
                    ),
                ),
                (
                    "twitter_og_description",
                    models.TextField(
                        blank=True,
                        help_text="If left blank, the OpenGraph description will be used.",
                        null=True,
                        verbose_name="Twitter OpenGraph description",
                    ),
                ),
                (
                    "teaser_text",
                    models.TextField(
                        help_text="A short, enticing description of this page. This will appear in promos and under thumbnails around the site.",
                        max_length=160,
                        verbose_name="teaser text",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        help_text="1-2 sentences introducing the subject of the page, and explaining why a user should read on.",
                        max_length=300,
                        verbose_name="introductory text",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("contact", 7),
                            ("document", 11),
                            ("image", 15),
                            ("image_gallery", 17),
                            ("media", 21),
                            ("paragraph", 23),
                            ("quote", 26),
                            ("table", 28),
                            ("youtube_video", 32),
                            ("content_section", 39),
                        ],
                        block_lookup={
                            0: ("wagtail.blocks.CharBlock", (), {}),
                            1: (
                                "wagtail.blocks.TextBlock",
                                (),
                                {
                                    "features": ["bold", "italic", "link"],
                                    "required": False,
                                },
                            ),
                            2: ("wagtail.blocks.CharBlock", (), {"required": False}),
                            3: ("wagtail.blocks.URLBlock", (), {"required": False}),
                            4: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {"required": False},
                            ),
                            5: ("wagtail.blocks.EmailBlock", (), {"required": False}),
                            6: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {
                                    "features": ["bold", "italic", "link"],
                                    "required": False,
                                },
                            ),
                            7: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("title", 0),
                                        ("address", 1),
                                        ("telephone", 2),
                                        ("chat_link", 3),
                                        ("chat_note", 4),
                                        ("email", 5),
                                        ("website_link", 3),
                                        ("social_media", 6),
                                    ]
                                ],
                                {},
                            ),
                            8: (
                                "wagtail.documents.blocks.DocumentChooserBlock",
                                (),
                                {"required": True},
                            ),
                            9: ("wagtail.blocks.StructBlock", [[("file", 8)]], {}),
                            10: ("wagtail.blocks.ListBlock", (9,), {}),
                            11: (
                                "wagtail.blocks.StructBlock",
                                [[("documents", 10)]],
                                {},
                            ),
                            12: (
                                "etna.core.blocks.image.APIImageChooserBlock",
                                (),
                                {"rendition_size": "max-900x900", "required": True},
                            ),
                            13: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": 'Alternative (alt) text describes images when they fail to load, and is read aloud by assistive technologies. Use a maximum of 100 characters to describe your image. <a href="https://html.spec.whatwg.org/multipage/images.html#alt" target="_blank">Check the guidance for tips on writing alt text</a>.',
                                    "label": "Alternative text",
                                    "max_length": 100,
                                },
                            ),
                            14: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {
                                    "features": ["bold", "italic", "link"],
                                    "help_text": "If provided, displays directly below the image. Can be used to specify sources, transcripts or other useful metadata.",
                                    "label": "Caption (optional)",
                                    "required": False,
                                },
                            ),
                            15: (
                                "wagtail.blocks.StructBlock",
                                [[("image", 12), ("alt_text", 13), ("caption", 14)]],
                                {},
                            ),
                            16: ("wagtail.blocks.ListBlock", (15,), {}),
                            17: (
                                "wagtail.blocks.StructBlock",
                                [[("title", 2), ("description", 6), ("images", 16)]],
                                {},
                            ),
                            18: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "A descriptive title for the media block",
                                    "required": True,
                                },
                            ),
                            19: (
                                "etna.core.blocks.image.APIImageChooserBlock",
                                (),
                                {"help_text": "A background image for the media block"},
                            ),
                            20: ("etna.media.blocks.MediaChooserBlock", (), {}),
                            21: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("title", 18),
                                        ("background_image", 19),
                                        ("media", 20),
                                    ]
                                ],
                                {},
                            ),
                            22: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {"features": ["bold", "italic", "link", "ol", "ul"]},
                            ),
                            23: ("wagtail.blocks.StructBlock", [[("text", 22)]], {}),
                            24: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {
                                    "features": ["bold", "italic", "link"],
                                    "required": True,
                                },
                            ),
                            25: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"max_length": 100, "required": False},
                            ),
                            26: (
                                "wagtail.blocks.StructBlock",
                                [[("quote", 24), ("attribution", 25)]],
                                {},
                            ),
                            27: (
                                "wagtail.contrib.table_block.blocks.TableBlock",
                                (),
                                {
                                    "table_options": {
                                        "contextMenu": [
                                            "row_above",
                                            "row_below",
                                            "---------",
                                            "col_left",
                                            "col_right",
                                            "---------",
                                            "remove_row",
                                            "remove_col",
                                            "---------",
                                            "undo",
                                            "redo",
                                            "---------",
                                            "alignment",
                                        ]
                                    }
                                },
                            ),
                            28: ("wagtail.blocks.StructBlock", [[("table", 27)]], {}),
                            29: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"label": "Title", "max_length": 100, "required": True},
                            ),
                            30: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "label": "YouTube Video ID",
                                    "max_length": 11,
                                    "required": True,
                                },
                            ),
                            31: (
                                "etna.core.blocks.image.APIImageChooserBlock",
                                (),
                                {
                                    "label": "Preview Image",
                                    "rendition_size": "max-640x360",
                                    "required": False,
                                },
                            ),
                            32: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("title", 29),
                                        ("video_id", 30),
                                        ("preview_image", 31),
                                    ]
                                ],
                                {},
                            ),
                            33: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"label": "Heading", "max_length": 100},
                            ),
                            34: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"label": "Sub-heading", "max_length": 100},
                            ),
                            35: ("wagtail.blocks.StructBlock", [[("heading", 34)]], {}),
                            36: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"label": "Sub-sub-heading", "max_length": 100},
                            ),
                            37: ("wagtail.blocks.StructBlock", [[("heading", 36)]], {}),
                            38: (
                                "wagtail.blocks.StreamBlock",
                                [
                                    [
                                        ("contact", 7),
                                        ("document", 11),
                                        ("image", 15),
                                        ("image_gallery", 17),
                                        ("media", 21),
                                        ("paragraph", 23),
                                        ("quote", 26),
                                        ("sub_heading", 35),
                                        ("sub_sub_heading", 37),
                                        ("table", 28),
                                        ("youtube_video", 32),
                                    ]
                                ],
                                {"required": False},
                            ),
                            39: (
                                "wagtail.blocks.StructBlock",
                                [[("heading", 33), ("content", 38)]],
                                {},
                            ),
                        },
                    ),
                ),
                (
                    "alert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="alerts.alert",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="OpenGraph image",
                    ),
                ),
                (
                    "teaser_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear on thumbnails and promos around the site.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "twitter_og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="If left blank, the OpenGraph image will be used.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="Twitter OpenGraph image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                etna.people.models.AuthorPageMixin,
                etna.analytics.mixins.DataLayerMixin,
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
    ]
